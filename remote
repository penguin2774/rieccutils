
quit = false
serverID = nil

function login()
   rednet.broadcast("Hello all!")
   local foundServer
   local count = 0
   while not foundServer do
      local senderID, message, dist = rednet.receive()
      if message == "Welcome to the group." then
	 foundServer = true
	 serverID = senderID
      else
	 count = count + 1
	 if count  >= 10 then
	    rednet.broadcast("Hello all!")
	 end
	 
      end
   end
end

function recieveOrders(t)
   if serverID == nil then
      error("Not logged in.")
   end
   rednet.send(serverID, "Awaiting Orders!")
   while true do
      local  senderID, message, dist = rednet.receive(10)
      if not senderID == nil then
	 print("Recieved message from ".. tostring(senderID) .. " '" .. message "'.")
	 print ("Server ID is ".. tostring(serverID))
      end
      if senderID == serverID then
	 return(message)
	 
      elseif senderID == nil then
	 return(nil)
      elseif quit == true then
	 return(nil)
      end
   end
end


function endProgram()
   quit = true
end


orderTable = {{order = "goto", func = move.goto},
	      {order = "face", func = move.face},
	      {order = "wall", func = build.wall},
	      {order = "floor", func = build.floor},
	      {order = "tower", func = build.tower},
	      {order = "complete", func = endProgram}}


function parseArgs(args)
   local result = {}
   for x in string.gmatch(args, "(-?%w+)") do
      if string.match(x, "-?%d+") then
	 table.insert(result, tonumber(x))
      else
	 table.insert(result, x)
      end
   end
   return(result)
end
	 
			   


function processOrder(message)
   local order, args = string.match(message, "([^ ]+) (.+)")
   if not order then
      order = string.match(message, "(%w+)")
   end
   for i,o in pairs(orderTable) do
      if o.order == order then
	 if args == nil then
	    return(o.func())
	 else
	    return(o.func(unpack(parseArgs(args))))
	 end
      end
   end
   
   error("Unknown order" .. order .. " args=" .. tostring(args))
end

rednet.open("right")
login()
print("logged in.")
local frustration = 0
while not quit do
   msg = recieveOrders()
   if msg then
      print("Orders received! '" .. msg.. "'")
      processOrder(msg)
   end
end
      
   
		
   
   
   
      