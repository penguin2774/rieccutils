    -- API for building 
    -- Copyright (C) 2013  Nathanael Cunningham

    -- This program is free software: you can redistribute it and/or modify
    -- it under the terms of the GNU General Public License as published by
    -- the Free Software Foundation, either version 3 of the License, or
    -- (at your option) any later version.

    -- This program is distributed in the hope that it will be useful,
    -- but WITHOUT ANY WARRANTY; without even the implied warranty of
    -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    -- GNU General Public License for more details.

    -- You should have received a copy of the GNU General Public License
    -- along with this program.  If not, see <http://www.gnu.org/licenses/>.

currentSlot = 1
turtle.select(1)

function findMaterial()
   for i=1, 16 do
      if turtle.getItemCount(i) > 0 then
	 turtle.select(i)
	 if turtle.compareTo(16) then
	    currentSlot = i
	    return(true)
	 end
      end
   end
   return(false)
end

function wall(width, height)
   move.up(1)
   findMaterial()
   for y = 1, height do
      for x = 1, width do
	 if not turtle.placeDown() then
	    if turtle.getItemCount(currentSlot) == 0 then
	       if not findMaterial() then
		  print("Ran out of material")
		  return
	       end
	    end
	    if turtle.detectDown() then
	       if not turtle.digDown() then
		  print("Cant dig down...")
		  return
	       end
	    end
	    if not turtle.placeDown() then
	       print("Cant seem to place down...")
	       return
	    end
	 end
	 if x ~= width  then
	    while not move.forward(1) do
	       print("Cant seem to move...")
	       turtle.attack()
	       os.sleep(5)
	    end
	    
	    
	 end
      end
      move.turnAround()
      move.up(1)
   end
end


function findMaterial()
   for i=1, 16 do
      if turtle.getItemCount(i) > 0 then
	 turtle.select(i)
	 if turtle.compareTo(16) then
	    currentSlot = i
	    return(true)
	 end
      end
   end
   return(false)
end

function placeBlock ()
   if turtle.getItemCount(currentSlot) == 0 or not turtle.compareTo(16) then
      if not findMaterial() then
	 print("Ran out of material")
	 return
      end
   end
   if not turtle.compareDown() then
      if not turtle.placeDown() then
	 if turtle.detectDown() then
	    if not turtle.digDown() then
	       print("Cant dig down...")
	       return
	    end
	 end
	 if not turtle.placeDown() then
	    print("Cant seem to place down...")
	    return
	 end
      end      
   end
end
function continueForward()
   while not move.forward(1) do
      print("Cant seem to move...")
      turtle.attack()
      os.sleep(5)
   end
end

function continueDiag()
   move.turnLeft()
   continueForward()
   move.turnRight()
   continueForward()
end


function buildVert(verts)
   for i = 1, verts do
      placeBlock()
      if i ~= verts then
	 continueForward()
      end
   end
end
   
function buildDiag (diags)
   for i = 0, diags do
      continueDiag()
      if i ~= diags then
	 placeBlock()
      end
   end
   move.turnLeft()
end


function tower(height, verts, diags)
   currentSlot = 1
   local starintPos = move.getPos()
   turtle.select(1)

   move.forward(math.ceil((verts + diags * 2) / 2) ) 
   move.turnRight()
   move.forward(math.floor(verts/2))
   move.turnAround()
   
   

   for i = 1, height do
      for i = 1, 4 do
   	 buildVert(verts)
   	 buildDiag(diags)
      end
      if i ~= height then
	 move.up(1)
      end
   end
   move.goto(startingPos)
end


function floor(width, depth)
   local startingPos = move.getPos()
   for i = 1, width do
      for j = 1, depth do
	 placeBlock()
	 if depth ~= j then
	    move.forward(1)
	 end
      end

      if i % 2 == 0 then
	 move.turnLeft()
	 move.forward(1)
	 move.turnLeft()
      else
	 move.turnRight()
	 move.forward(1)
	 move.turnRight()
      end
   end
   move.goto(startingPos)
end

function turnForwardTurn(leftp)
   if leftp then
      move.turnLeft()
      move.forward(1)
      move.turnLeft()
   else
      move.turnRight()
      move.forward(1)
      move.turnRight()
   end
end

function clear(width, depth, height)
   local startingPos = move.getPos()
   local i, j, k
   local turnLeft = false
   for k = 1, height do
      for i = 1, width do
	 for j = 1, depth do
	    if depth ~= j then
	       move.forward(1)
	    end
	 end
	 
	 if i ~= width then
	    
	    turnForwardTurn( turnLeft )
	    turnLeft = not turnLeft
	 end
      end
      if height ~= k then
	 move.up(1)
	 move.turnAround()

      end
   end
   move.goto(startingPos)
end

function fill(width, depth)
      for i = 1, width do
	 for j = 1, depth do
	    if not turtle.detectDown() then
	       local dist = 0
	       repeat
		  move.down(1)
		  dist = dist + 1
	       until turtle.detectDown() 
	       while dist ~= 0 do
		  move.up(1)
		  placeBlock()
		  dist = dist - 1
	       end
	       
	    end
	    
	    

	    if depth ~= j then
	       move.forward(1)
	    end
	 end
	 
	 if i % 2 == 0 then
	    move.turnLeft()
	    move.forward(1)
	    move.turnLeft()
	 else
	    move.turnRight()
	    move.forward(1)
	    move.turnRight()
	 end
      end
end



function circle(r)
   startPos = move.getPos()
   local prevPos = startPos
   for x = 0, r  do 
      local nx = x + startPos.x
      local iy, i = math.sqrt(r^2 - x^2)
      local ny = math.floor(startPos.y + iy)
      local nz = startPos.z
      move.goto(nx, ny, nz)
      build.placeBlock()
      prevPos = cPos
   end
   move.goto(startPos)
end