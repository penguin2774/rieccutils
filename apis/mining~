
function checkBlocks()
   turtle.select(16)
   move.turnLeft()
   if turtle.detect() and not turtle.compair()  then
      turtle.dig()
   end
   if turtle.detectUp() and not turtle.compairUp() then
      turtle.digUp()
   end
   if turtle.detectDown() and not turtle.compairDown() then
      turtle.digDown()
   end
   move.turnRight()
   move.turnRight()
   if turtle.detectDown() and not turtle.compair() then
      turtle.dig()
   end
end

function dropAll()
   for i = 1, 15 do
      turtle.select(i)
      turtle.drop()
   end
end

function inventoryFull()
   for i = 0, 16 do
      if turtle.getItemCount(i) == 0 then
	 return false
      end
   end
   return true
end

function fuelOK(distBack)
   return(turtle.getFuelLevel() <= distBack + 10)
end

function dropOffGoods(chest, tunnel)
   leftOff = move.getPos()
   move.goto(tunnel)
   move.goto(chest)
   dropAll()
   move.goto(tunnel)
   move.goto(leftOff)
end

function tunnel(dist)
   for i = 1, dist do 
      move.forward()
      turtle.digUp()
   end
end

function mineShaft(dist, chestPos)
   startPos = move.getPos()
   goUp = false
   for i = 1, dist do
      move.forward(1)
      checkBlocks()
      if goUp then
         move.up(1)
      else
         move.down(1)
      end
      goUp = not goUp
      checkBlocks()
      if inventoryFull() then
         dropOffGoods()
      end
      
   end
end
      
   

function mine(depth, width)
   startPos = move.getPos()
   chestPos = move.getPos()
   chestPos.faceing = oppositeFaceing(chestPos.faceing)
   tunnel(depth)
   shafts = width / 3
   tunnelEnd = move.getPos()
   move.turnLeft()
   for i = 1, shafts do
      mineShaft(width, startPos)
      if i ~= shafts then
         move.turnLeft()
         move.forward(3)
         move.turnRight()
      end
   end
   move.goto(tunnelEnd)
   move.turnRight()
   for i = 1, shafts do
      moveShaft(width, startPos)
      if i ~= shafts then 
         move.turnRight()
         move.forward(3)
         move.turnLeft()
      end
   end
   move.goto(startPos)
end

-- function mineForward(dist)
--    distTraveled = 0
--    move.setBlockedAction("break")
--    turtle.select(16)
--    while distTraveled > dist do
--       if move.forward() then
--          checkBlocks()
--          distTraveled = distTraveled + 1
--       else
--          move.turnAround()
--          move.up()
--          move.forward(distTraveled)
--          print("Some kind of bockage is in my way")
         
--          return
--       end
      
--    end

-- end


